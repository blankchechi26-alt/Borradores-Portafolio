# -*- coding: utf-8 -*-
"""borrador 10 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14swWnR-myB_cZGdpoqztzbBnkfCkDP7J
"""

# -*- coding: utf-8 -*-
"""Aplicaci√≥n interactiva de an√°lisis de portafolio con Streamlit y Yahoo Finance"""

import streamlit as st
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt

# -----------------------------------------------------------
# T√çTULO E INTRODUCCI√ìN
# -----------------------------------------------------------
st.title("üìà AN√ÅLISIS DE PORTAFOLIO DE INVERSI√ìN")
st.markdown("""
Explora c√≥mo la **diversificaci√≥n** reduce el riesgo al combinar activos de distintos sectores.
Selecciona dos acciones, visualiza su comportamiento y analiza la relaci√≥n entre riesgo y rentabilidad.
""")

# -----------------------------------------------------------
# MEN√ö LATERAL
# -----------------------------------------------------------
st.sidebar.header("‚öôÔ∏è Controles de an√°lisis")

# Selecci√≥n de acciones (puedes elegir cualquiera de Yahoo Finance)
ticker1 = st.sidebar.text_input("Primera acci√≥n (ejemplo: AAPL)", "AAPL")
ticker2 = st.sidebar.text_input("Segunda acci√≥n (ejemplo: KO)", "KO")

# Fechas de an√°lisis
fecha_inicio = st.sidebar.date_input("Fecha de inicio", pd.to_datetime("2022-01-01"))
fecha_fin = st.sidebar.date_input("Fecha final", pd.to_datetime("2025-01-01"))

# Bot√≥n para ejecutar el an√°lisis
if st.sidebar.button("Ejecutar an√°lisis"):

    tickers = [ticker1.upper(), ticker2.upper()]
    st.subheader(f"üìä Acciones seleccionadas: {tickers}")

    # -----------------------------------------------------------
    # DESCARGA DE DATOS
    # -----------------------------------------------------------
    try:
        data = yf.download(tickers, start=fecha_inicio, end=fecha_fin)['Adj Close']
        st.write("Datos descargados correctamente ‚úÖ")
    except Exception as e:
        st.error(f"Error al descargar datos: {e}")
        st.stop()

    st.dataframe(data.tail())

    # -----------------------------------------------------------
    # C√ÅLCULO DE RENDIMIENTOS
    # -----------------------------------------------------------
    returns = data.pct_change().dropna()
    st.subheader("üìà Estad√≠sticas de rentabilidad diaria")
    st.write(returns.describe())

    # -----------------------------------------------------------
    # MEN√ö DE VISUALIZACI√ìN
    # -----------------------------------------------------------
    opcion_vista = st.selectbox(
        "Selecciona el tipo de gr√°fico a mostrar:",
        ("Evoluci√≥n de precios", "Relaci√≥n de rendimientos", "Matriz de correlaci√≥n")
    )

    # -----------------------------------------------------------
    # GR√ÅFICOS
    # -----------------------------------------------------------
    if opcion_vista == "Evoluci√≥n de precios":
        st.subheader("üìâ Evoluci√≥n del precio de las acciones")
        fig, ax = plt.subplots()
        data.plot(ax=ax)
        ax.set_xlabel("Fecha")
        ax.set_ylabel("Precio ajustado (USD)")
        st.pyplot(fig)

    elif opcion_vista == "Relaci√≥n de rendimientos":
        st.subheader("üîó Relaci√≥n entre los rendimientos (correlaci√≥n)")
        fig2, ax2 = plt.subplots()
        ax2.scatter(returns[ticker1.upper()], returns[ticker2.upper()], alpha=0.6)
        ax2.set_xlabel(f"Rendimiento diario de {ticker1.upper()}")
        ax2.set_ylabel(f"Rendimiento diario de {ticker2.upper()}")
        ax2.set_title(f"Diversificaci√≥n: {ticker1.upper()} vs {ticker2.upper()}")
        st.pyplot(fig2)

    elif opcion_vista == "Matriz de correlaci√≥n":
        st.subheader("üìä Matriz de correlaci√≥n")
        correlacion = returns.corr()
        st.write(correlacion)

    # -----------------------------------------------------------
    # INTERPRETACI√ìN
    # -----------------------------------------------------------
    st.markdown("""
    ### üí° Interpretaci√≥n
    - Si la **correlaci√≥n** entre las dos acciones es **baja o negativa**, significa que no se mueven igual:
      cuando una baja, la otra puede subir o mantenerse estable.
    - Esto **reduce el riesgo total del portafolio** y demuestra la utilidad de la **diversificaci√≥n**.

    **Conclusi√≥n:**
    Combinar activos de sectores distintos genera un portafolio m√°s estable frente a la volatilidad del mercado.
    """)

else:
    st.info("üëà Selecciona las acciones y presiona **Ejecutar an√°lisis** para comenzar.")

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit